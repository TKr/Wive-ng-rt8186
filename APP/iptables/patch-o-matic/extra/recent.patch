diff -uNr linux-2.4.17-clean/include/linux/netfilter_ipv4/ipt_recent.h linux-2.4.17-ipt_recent/include/linux/netfilter_ipv4/ipt_recent.h
--- linux-2.4.17-clean/include/linux/netfilter_ipv4/ipt_recent.h	Wed Dec 31 19:00:00 1969
+++ linux-2.4.17-ipt_recent/include/linux/netfilter_ipv4/ipt_recent.h	Sat Jan 26 16:28:45 2002
@@ -0,0 +1,18 @@
+#ifndef _IPT_RECENT_H
+#define _IPT_RECENT_H
+
+const static int IPT_RECENT_CHECK = 1;
+const static int IPT_RECENT_SET = 2;
+const static int IPT_RECENT_UPDATE = 4;
+const static int IPT_RECENT_REMOVE = 8;
+const static int IPT_RECENT_TTL = 16;
+
+struct ipt_recent_info {
+  u_int32_t   seconds;
+  u_int32_t   hit_count;
+  u_int8_t    check_set;
+  u_int8_t    invert;
+  char        name[200];
+};
+
+#endif /*_IPT_RECENT_H*/
diff -uNr linux-2.4.17-clean/net/ipv4/netfilter/ipt_recent.c linux-2.4.17-ipt_recent/net/ipv4/netfilter/ipt_recent.c
--- linux-2.4.17-clean/net/ipv4/netfilter/ipt_recent.c	Wed Dec 31 19:00:00 1969
+++ linux-2.4.17-ipt_recent/net/ipv4/netfilter/ipt_recent.c	Sat Jan 26 17:43:07 2002
@@ -0,0 +1,518 @@
+/* Kernel module to check if the source address has been seen recently. */
+#include <linux/module.h>
+#include <linux/skbuff.h>
+#include <linux/proc_fs.h>
+#include <linux/spinlock.h>
+#include <linux/interrupt.h>
+#include <asm/uaccess.h>
+#include <linux/ctype.h>
+#include <linux/ip.h>
+
+#include <linux/netfilter_ipv4/ip_tables.h>
+#include <linux/netfilter_ipv4/ipt_recent.h>
+
+/* Defaults, these can be overridden on the module command-line. */
+static int ip_list_tot = 40;
+static int ip_pkt_list_tot = 10;
+
+MODULE_AUTHOR("Stephen Frost <sfrost@snowman.net>");
+MODULE_DESCRIPTION("IP tables recently seen matching module");
+MODULE_LICENSE("GPL");
+MODULE_PARM(ip_list_tot,"i");
+MODULE_PARM(ip_pkt_list_tot,"i");
+MODULE_PARM_DESC(ip_list_tot,"number of IPs to remember per list");
+MODULE_PARM_DESC(ip_pkt_list_tot,"number of packets per IP to remember");
+
+/* Structure of our list of recently seen addresses. */
+struct recent_ip_list {
+  u_int32_t saddr;
+  u_int8_t	ttl;
+  u_int32_t last_seen;
+  u_int32_t *last_pkts;
+  u_int32_t oldest_pkt;
+};
+
+/* Structure of our linked list of tables of recent lists. */
+struct recent_ip_tables {
+  char name[200];
+  int count;
+  struct recent_ip_list *table;
+  struct recent_ip_tables *next;
+  spinlock_t list_lock;
+  struct proc_dir_entry *status_proc;
+};
+
+/* Our current list of addresses we have recently seen.
+ * Only added to on a --set, and only updated on --set || --update 
+ */
+static struct recent_ip_tables *r_tables;
+
+/* We protect r_list with this spinlock so two processors are not modifying
+ * the list at the same time. 
+ */
+static spinlock_t recent_lock = SPIN_LOCK_UNLOCKED;
+
+/* Our /proc/net/ipt_recent entry */
+static struct proc_dir_entry *proc_net_ipt_recent;
+
+/* Function declaration for later. */
+static int
+match(const struct sk_buff *skb,
+      const struct net_device *in,
+      const struct net_device *out,
+      const void *matchinfo,
+      int offset,
+      const void *hdr,
+      u_int16_t datalen,
+      int *hotdrop);
+
+/* This is the function which produces the output for our /proc output
+ * interface which lists each IP address, the last seen time and the 
+ * other recent times the address was seen.
+ */
+
+static int ip_recent_get_info(char *buffer, char **start, off_t offset, int length, int *eof, void *data)
+{
+	int len = 0, count, last_len = 0, pkt_count;
+	off_t pos = 0;
+	off_t begin = 0;
+	struct recent_ip_tables *curr_table;
+
+	curr_table = (struct recent_ip_tables*) data;
+
+	spin_lock_bh(&curr_table->list_lock);
+	for(count = 0; count < ip_list_tot; count++) {
+		if(!curr_table->table[count].saddr) continue;
+		last_len = len;
+		len += sprintf(buffer+len,"src=%u.%u.%u.%u ",NIPQUAD(curr_table->table[count].saddr));
+		len += sprintf(buffer+len,"ttl: %d ",curr_table->table[count].ttl);
+		len += sprintf(buffer+len,"last_seen: %d ",curr_table->table[count].last_seen);
+		len += sprintf(buffer+len,"oldest_pkt: %d ",curr_table->table[count].oldest_pkt);
+		len += sprintf(buffer+len,"last_pkts: %d",curr_table->table[count].last_pkts[0]);
+		for(pkt_count = 1; pkt_count < ip_pkt_list_tot; pkt_count++) {
+			if(!curr_table->table[count].last_pkts[pkt_count]) break;
+			len += sprintf(buffer+len,", %d",curr_table->table[count].last_pkts[pkt_count]);
+		}
+		len += sprintf(buffer+len,"\n");
+		pos = begin + len;
+		if(pos < offset) { len = 0; begin = pos; }
+		if(pos > offset + length) { len = last_len; break; }
+	}
+
+	*start = buffer + (offset - begin);
+	len -= (offset - begin);
+	if(len > length) len = length;
+
+	spin_unlock_bh(&curr_table->list_lock);
+	return len;
+}
+
+/* ip_recent_ctrl provides an interface for users to modify the table
+ * directly.  This allows adding entries, removing entries, and
+ * flushing the entire table.
+ * This is done by opening up the appropriate table for writing and
+ * sending one of:
+ * xx.xx.xx.xx   -- Add entry to table with current time
+ * +xx.xx.xx.xx  -- Add entry to table with current time
+ * -xx.xx.xx.xx  -- Remove entry from table
+ * -0.0.0.0      -- Flush table, remove all entries
+ */
+
+static int ip_recent_ctrl(struct file *file, const char *input, unsigned long size, void *data)
+{
+	static const u_int32_t max[4] = { 0xffffffff, 0xffffff, 0xffff, 0xff };
+	u_int32_t val;
+	int base;
+	char c, *cp;
+	union iaddr {
+		uint8_t bytes[4];
+		uint32_t word;
+	} res;
+	uint8_t *pp = res.bytes;
+	int digit;
+
+	char buffer[1024];
+	int len, check_set = 0, count;
+	u_int32_t saddr = 0;
+	struct sk_buff skb;
+	struct ipt_recent_info info;
+	struct recent_ip_tables *curr_table;
+
+	curr_table = (struct recent_ip_tables*) data;
+
+	if(size > 1024) len = 1024; else len = size;
+
+	if(copy_from_user(buffer,input,len)) return -EFAULT;
+
+	buffer[len-1] = '\0';
+
+	cp = buffer;
+	if(buffer[0] == '+') { check_set = IPT_RECENT_SET; cp++; }
+	if(buffer[0] == '-') { check_set = IPT_RECENT_REMOVE; cp++; }
+	if(buffer[0] >= '0' && buffer[0] <= '9') check_set = IPT_RECENT_SET;
+	if(!check_set) return len;
+
+	/* Get saddr (effectively inet_aton()) */
+	/* Shamelessly stolen from libc, a function in the kernel for doing
+	 * this would, of course, be greatly preferred, but our options appear
+	 * to be rather limited, so we will just do it ourselves here.
+	 */
+	res.word = 0;
+
+	c = *cp;
+	for(;;) {
+		if(!isdigit(c)) return len;
+		val = 0; base = 10; digit = 0;
+		if(c == '0') {
+			c = *++cp;
+			if(c == 'x' || c == 'X') base = 16, c = *++cp;
+			else { base = 8; digit = 1; }
+		}
+		for(;;) {
+			if(isascii(c) && isdigit(c)) {
+				if(base == 8 && (c == '8' || c == '0')) return len;
+				val = (val * base) + (c - '0');
+				c = *++cp;
+				digit = 1;
+			} else if(base == 16 && isascii(c) && isxdigit(c)) {
+				val = (val << 4) | (c + 10 - (islower(c) ? 'a' : 'A'));
+				c = *++cp;
+				digit = 1;
+			} else break;
+		}
+		if(c == '.') {
+			if(pp > res.bytes + 2 || val > 0xff) return len;
+			*pp++ = val;
+			c = *++cp;
+		} else break;
+	}
+	if(c != '\0' && (!isascii(c) || !isspace(c))) return len;
+	if(!digit) return len;
+
+	if(val > max[pp - res.bytes]) return len;
+	saddr = res.word | htonl(val);
+
+	if(!saddr && check_set == IPT_RECENT_SET) return len;
+
+	/* Check if we are asked to flush the entire table */
+	if(!saddr && check_set == IPT_RECENT_REMOVE) {
+		spin_lock_bh(&curr_table->list_lock);
+		for(count = 0; count < ip_list_tot; count++) {
+			curr_table->table[count].last_seen = 0;
+			curr_table->table[count].saddr = 0;
+			curr_table->table[count].ttl = 0;
+			memset(curr_table->table[count].last_pkts,0,ip_pkt_list_tot*sizeof(u_int32_t));
+			curr_table->table[count].oldest_pkt = 0;
+		}
+		spin_unlock_bh(&curr_table->list_lock);
+		return len;
+	}
+
+	/* Set up and just call match */
+	info.seconds = 0;
+	info.hit_count = 0;
+	info.check_set = check_set;
+	info.invert = 0;
+	strncpy(info.name,curr_table->name,200);
+
+	skb.nh.iph = kmalloc(sizeof(struct iphdr),GFP_KERNEL);
+	if(!skb.nh.iph) { return -ENOMEM; }
+
+	skb.nh.iph->saddr = saddr;
+	match(&skb,NULL,NULL,&info,0,NULL,sizeof(info),NULL);
+	kfree(skb.nh.iph);
+
+	return len;
+}
+
+/* 'match' is our primary function, called by the kernel whenever a rule is
+ * hit with our module as an option to it.
+ * What this function does depends on what was specifically asked of it by
+ * the user:
+ * --set -- Add or update last seen time of the source address of the packet
+ *   -- matchinfo->check_set == IPT_RECENT_SET
+ * --rcheck -- Just check if the source address is in the list
+ *   -- matchinfo->check_set == IPT_RECENT_CHECK
+ * --update -- If the source address is in the list, update last_seen
+ *   -- matchinfo->check_set == IPT_RECENT_UPDATE
+ * --remove -- If the source address is in the list, remove it
+ *   -- matchinfo->check_set == IPT_RECENT_REMOVE
+ * --seconds -- Option to --rcheck/--update, only match if last_seen within seconds
+ *   -- matchinfo->seconds
+ * --hitcount -- Option to --rcheck/--update, only match if seen hitcount times
+ *   -- matchinfo->hit_count
+ * --seconds and --hitcount can be combined
+ */
+static int
+match(const struct sk_buff *skb,
+      const struct net_device *in,
+      const struct net_device *out,
+      const void *matchinfo,
+      int offset,
+      const void *hdr,
+      u_int16_t datalen,
+      int *hotdrop)
+{
+	int count, pkt_count, oldest = 0, hits_found, ans;
+	unsigned long now = jiffies;
+	unsigned long oldest_time;
+	const struct ipt_recent_info *info = matchinfo;
+	u_int32_t saddr = skb->nh.iph->saddr;
+	u_int8_t ttl = skb->nh.iph->ttl;
+	struct recent_ip_tables *curr_table;
+	struct recent_ip_tables *last_table;
+	struct recent_ip_list *r_list;
+
+	/* Default is false ^ info->invert */
+	ans = info->invert;
+
+	/* Find the right table */
+	spin_lock_bh(&recent_lock);
+	curr_table = r_tables;
+	while( (last_table = curr_table) && strncmp(info->name,curr_table->name,200) && (curr_table = curr_table->next) );
+	spin_unlock_bh(&recent_lock);
+
+	/* Table with this name not found, match impossible */
+	if(!curr_table) { return ans; }
+
+	/* Make sure no one is changing the list while we work with it */
+	spin_lock_bh(&curr_table->list_lock);
+
+	r_list = curr_table->table;
+
+	for(count = 0, oldest_time = r_list[0].last_seen; count < ip_list_tot; count++) {
+		/* Keep track of empty spaces which can be filled up later */
+		if(!r_list[count].saddr) { oldest = count; continue; }
+		/* Keep track of the oldest entry if we have been asked to add this entry
+		 * to the table if it does not exist. */
+		if(info->check_set & IPT_RECENT_SET && r_list[count].last_seen < oldest_time) {
+			oldest_time = r_list[count].last_seen;
+			oldest = count;
+		}
+		if(r_list[count].saddr == saddr) {
+			/* We have a match on address, now to make sure it meets all requirements for a
+			 * full match. */
+			/* Check for TTL match if requested.  If TTL is zero then a match would never
+			 * happen, so match regardless of existing TTL in that case.  Zero means the
+			 * entry was added via the /proc interface anyway, so we will just use the
+			 * first TTL we get for that IP address. */
+			if(info->check_set & IPT_RECENT_TTL && r_list[count].ttl && r_list[count].ttl != ttl) continue;
+			if(info->check_set & IPT_RECENT_CHECK || info->check_set & IPT_RECENT_UPDATE) {
+				if(!info->seconds && !info->hit_count) ans = !info->invert; else ans = info->invert;
+				if(info->seconds && !info->hit_count) {
+					if(time_before(now,r_list[count].last_seen+info->seconds*HZ)) ans = !info->invert; else ans = info->invert;
+				}
+				if(info->seconds && info->hit_count) {
+					for(pkt_count = 0, hits_found = 0; pkt_count < ip_pkt_list_tot; pkt_count++) {
+						if(time_before(now,r_list[count].last_pkts[pkt_count]+info->seconds*HZ)) hits_found++;
+					}
+					if(hits_found >= info->hit_count) ans = !info->invert; else ans = info->invert;
+				}
+				if(info->hit_count && !info->seconds) {
+					for(pkt_count = 0, hits_found = 0; pkt_count < ip_pkt_list_tot; pkt_count++) {
+						if(r_list[count].last_pkts[pkt_count] == 0) break;
+						hits_found++;
+					}
+					if(hits_found >= info->hit_count) ans = !info->invert; else ans = info->invert;
+				}
+			}
+			/* If and only if we have been asked to SET, or to UPDATE (on match) do we add the
+			 * current timestamp to the last_seen. */
+			if((info->check_set & IPT_RECENT_SET && (ans = !info->invert)) || (info->check_set & IPT_RECENT_UPDATE && ans)) {
+				r_list[count].last_seen = now;
+				/* If asked to match on TTL we will not hit here unless the TTL already matches,
+				 * or is zero.  If zero then the IP address was added via /proc, so we need to
+				 * add the TTL here for the IP address.  If non-zero, then we are not matching
+				 * on TTL, or the TTL already matches, so it does not hurt to set it here. */
+				r_list[count].ttl = ttl;
+				r_list[count].last_pkts[r_list[count].oldest_pkt] = now;
+				r_list[count].oldest_pkt = ++r_list[count].oldest_pkt % ip_pkt_list_tot;
+			}
+			/* If we have been asked to remove the entry from the list, just set it to 0 */
+			if(info->check_set & IPT_RECENT_REMOVE) {
+				r_list[count].last_seen = 0;
+				r_list[count].saddr = 0;
+				r_list[count].ttl = 0;
+				memset(r_list[count].last_pkts,0,ip_pkt_list_tot*sizeof(u_int32_t));
+				r_list[count].oldest_pkt = 0;
+				ans = !info->invert;
+			}
+			spin_unlock_bh(&curr_table->list_lock);
+			return ans;
+		}
+	}
+
+	/* If the address is not currently in the list and we have been asked to SET
+	 * then we need to add it to the list.  We do this by replacing the oldest
+	 * entry in the list which is determined when we step through the list. */
+	if(info->check_set & IPT_RECENT_SET) {
+		memset(r_list[oldest].last_pkts,0,ip_pkt_list_tot*sizeof(u_int32_t));
+		r_list[oldest].saddr = saddr;
+		r_list[oldest].ttl = ttl;
+		r_list[oldest].last_seen = now;
+		r_list[oldest].last_pkts[0] = now;
+		r_list[oldest].oldest_pkt = 1;
+
+		ans = !info->invert;
+	}
+
+	spin_unlock_bh(&curr_table->list_lock);
+	return ans;
+}
+
+/* This function is to verify that the rule given during the userspace iptables
+ * command is correct.
+ * If the command is valid then we check if the table name referred to by the
+ * rule exists, if not it is created.
+ */
+static int
+checkentry(const char *tablename,
+           const struct ipt_ip *ip,
+           void *matchinfo,
+           unsigned int matchsize,
+           unsigned int hook_mask)
+{
+	int flag = 0, c;
+	u_int32_t *hold;
+	const struct ipt_recent_info *info = matchinfo;
+	struct recent_ip_tables *curr_table, *last_table;
+	if (matchsize != IPT_ALIGN(sizeof(struct ipt_recent_info))) return 0;
+
+	/* seconds and hit_count only valid for CHECK/UPDATE */
+	if(info->check_set & IPT_RECENT_SET) { flag++; if(info->seconds || info->hit_count) return 0; }
+	if(info->check_set & IPT_RECENT_REMOVE) { flag++; if(info->seconds || info->hit_count) return 0; }
+	if(info->check_set & IPT_RECENT_CHECK) flag++;
+	if(info->check_set & IPT_RECENT_UPDATE) flag++;
+
+	/* One and only one of these should ever be set */
+	if(flag != 1) return 0;
+
+	/* Name must be set to something */
+	if(!info->name || !info->name[0]) return 0;
+
+	/* Things look good, create a list for this if it does not exist */
+	/* Lock the linked list while we play with it */
+	spin_lock_bh(&recent_lock);
+
+	/* Look for an entry with this name already created */
+	/* Finds the end of the list and the entry before the end if current name does not exist */
+	curr_table = r_tables;
+	while( (last_table = curr_table) && strncmp(info->name,curr_table->name,200) && (curr_table = curr_table->next) );
+
+	/* If a table already exists just increment the count on that table and return */
+	if(curr_table) { curr_table->count++; spin_unlock_bh(&recent_lock); return 1; }
+
+	/* Table with this name not found */
+	/* Allocate memory for new linked list item */
+	curr_table = kmalloc(sizeof(struct recent_ip_tables),GFP_KERNEL);
+	if(curr_table == NULL) { spin_unlock_bh(&recent_lock); return -ENOMEM; }
+
+	curr_table->list_lock = SPIN_LOCK_UNLOCKED;
+	curr_table->next = NULL;
+	curr_table->count = 1;
+	strncpy(curr_table->name,info->name,200);
+
+	/* Allocate memory for this table and the list of packets in each entry. */
+	curr_table->table = kmalloc(sizeof(struct recent_ip_list)*ip_list_tot,GFP_KERNEL);
+	if(curr_table->table == NULL) { spin_unlock_bh(&recent_lock); return -ENOMEM; }
+	memset(curr_table->table,0,sizeof(struct recent_ip_list)*ip_list_tot);
+	hold = kmalloc(sizeof(u_int32_t)*ip_pkt_list_tot*ip_list_tot,GFP_KERNEL);
+	if(hold == NULL) { kfree(curr_table->table); spin_unlock_bh(&recent_lock); return -ENOMEM; }
+	for(c = 0; c < ip_list_tot; c++) {
+		curr_table->table[c].last_pkts = hold + c*ip_pkt_list_tot;
+	}
+
+	/* Create our proc 'status' entry. */
+	curr_table->status_proc = create_proc_entry(curr_table->name, 0644, proc_net_ipt_recent);
+	if (curr_table->status_proc) curr_table->status_proc->owner = THIS_MODULE;
+	else {
+		kfree(curr_table->table);
+		kfree(curr_table);
+		kfree(hold);
+		return -ENOMEM;
+	}
+	curr_table->status_proc->read_proc = ip_recent_get_info;
+	curr_table->status_proc->write_proc = ip_recent_ctrl;
+	curr_table->status_proc->data = curr_table;
+
+	/* Put the new table in place */
+	if(!last_table) r_tables = curr_table; else last_table->next = curr_table;
+
+	spin_unlock_bh(&recent_lock);
+
+	return 1;
+}
+
+/* This function is called in the event that a rule matching this module is
+ * removed.
+ * When this happens we need to check if there are no other rules matching
+ * the table given.  If that is the case then we remove the table and clean
+ * up its memory.
+ */
+static void
+destroy(void *matchinfo, unsigned int matchsize)
+{
+	const struct ipt_recent_info *info = matchinfo;
+	struct recent_ip_tables *curr_table, *last_table;
+	if(matchsize != IPT_ALIGN(sizeof(struct ipt_recent_info))) return;
+
+	/* Lock the linked list while we play with it */
+	spin_lock_bh(&recent_lock);
+
+	/* Look for an entry with this name already created */
+	/* Finds the end of the list and the entry before the end if current name does not exist */
+	last_table = NULL;
+	curr_table = r_tables;
+	if(!curr_table) { spin_unlock_bh(&recent_lock); return; }
+	while( strncmp(info->name,curr_table->name,200) && (last_table = curr_table) && (curr_table = curr_table->next) );
+
+	/* If a table does not exist then do nothing and return */
+	if(!curr_table) { spin_unlock_bh(&recent_lock); return; }
+
+	curr_table->count--;
+	/* If count is still non-zero then there are still rules referenceing it so we do nothing */
+	if(curr_table->count) { spin_unlock_bh(&recent_lock); return; }
+
+	/* Count must be zero so we remove this table from the list */
+	if(last_table) last_table->next = curr_table->next; else r_tables = curr_table->next;
+
+	/* lock to make sure any late-runners still using this after we removed it from
+	 * the list finish up then remove everything */
+	spin_lock_bh(&curr_table->list_lock);
+	remove_proc_entry(curr_table->name,proc_net_ipt_recent);
+	kfree(curr_table->table[0].last_pkts);
+	kfree(curr_table->table);
+	spin_unlock_bh(&curr_table->list_lock);
+	kfree(curr_table);
+
+	spin_unlock_bh(&recent_lock);
+
+	return;
+}
+
+/* This is the structure we pass to ipt_register to register our
+ * module with iptables.
+ */
+static struct ipt_match recent_match
+= { { NULL, NULL }, "recent", &match, &checkentry, &destroy, THIS_MODULE };
+
+/* Kernel module initialization. */
+static int __init init(void)
+{
+	proc_net_ipt_recent = proc_mkdir("ipt_recent",proc_net);
+	if(!proc_net_ipt_recent) return -ENOMEM;
+
+	return ipt_register_match(&recent_match);
+}
+
+/* Kernel module destruction. */
+static void __exit fini(void)
+{
+	ipt_unregister_match(&recent_match);
+
+	remove_proc_entry("ipt_recent",proc_net);
+}
+
+/* Register our module with the kernel. */
+module_init(init);
+module_exit(fini);
