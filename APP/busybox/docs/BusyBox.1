.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.07)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2010-01-28" "version 1.16.0" "BusyBox"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX\s0. \s-1CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX\s0.
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 11
\&        [, [[, arp, arping, ash, awk, cat, chmod, clear, cp, crond, crontab,
\&        cut, date, dd, df, dhcprelay, dmesg, dnsdomainname, dumpleases,
\&        echo, egrep, expr, false, fgrep, find, free, ftpget, ftpput, grep,
\&        gunzip, gzip, halt, head, hexdump, hostname, ifconfig, inetd, init,
\&        insmod, ip, ipaddr, iplink, iproute, iprule, kill, killall, klogd,
\&        linuxrc, ln, logger, login, logread, ls, lsmod, microcom, mkdir,
\&        mknod, modprobe, mount, mv, netstat, nice, nslookup, passwd, ping,
\&        poweroff, ps, reboot, rm, rmmod, route, run\-parts, sed, seq, sh,
\&        sleep, sort, sysctl, syslogd, tail, tar, test, top, traceroute,
\&        true, udhcpc, udhcpd, umount, uname, uptime, vconfig, vi, watch,
\&        wget, which, yes, zcat
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBarp\fR" 4
.IX Item "arp"
arp 
[\-vn]	[\-H type] [\-i if] \-a [hostname]
[\-v]		  [\-i if] \-d hostname [pub]
[\-v]	[\-H type] [\-i if] \-s hostname hw_addr [temp]
[\-v]	[\-H type] [\-i if] \-s hostname hw_addr [netmask nm] pub
[\-v]	[\-H type] [\-i if] \-Ds hostname ifa [netmask nm] pub
.Sp
Manipulate \s-1ARP\s0 cache
.Sp
Options:
.Sp
.Vb 9
\&        \-a              Display (all) hosts
\&        \-s              Set new ARP entry
\&        \-d              Delete a specified entry
\&        \-v              Verbose
\&        \-n              Don\*(Aqt resolve names
\&        \-i IF           Network interface
\&        \-D              Read <hwaddr> from given device
\&        \-A, \-p AF       Protocol family
\&        \-H HWTYPE       Hardware address type
.Ve
.IP "\fBarping\fR" 4
.IX Item "arping"
arping [\-fqbDUA] [\-c count] [\-w timeout] [\-I dev] [\-s sender] target
.Sp
Send \s-1ARP\s0 requests/replies
.Sp
Options:
.Sp
.Vb 11
\&        \-f              Quit on first ARP reply
\&        \-q              Quiet
\&        \-b              Keep broadcasting, don\*(Aqt go unicast
\&        \-D              Duplicated address detection mode
\&        \-U              Unsolicited ARP mode, update your neighbors
\&        \-A              ARP answer mode, update your neighbors
\&        \-c N            Stop after sending N ARP requests
\&        \-w timeout      Time to wait for ARP reply, in seconds
\&        \-I dev          Interface to use (default eth0)
\&        \-s sender       Sender IP address
\&        target          Target IP address
.Ve
.IP "\fBawk\fR" 4
.IX Item "awk"
awk [\s-1OPTIONS\s0] [\s-1AWK_PROGRAM\s0] [\s-1FILE\s0]...
.Sp
Options:
.Sp
.Vb 3
\&        \-v VAR=VAL      Set variable
\&        \-F SEP          Use SEP as field separator
\&        \-f FILE         Read program from FILE
.Ve
.IP "\fBcat\fR" 4
.IX Item "cat"
cat [\-u] [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them to stdout
.Sp
Options:
.Sp
.Vb 1
\&        \-u      Use unbuffered i/o (ignored)
.Ve
.IP "\fBchmod\fR" 4
.IX Item "chmod"
chmod [\-R] MODE[,MODE]... \s-1FILE\s0...
.Sp
Each \s-1MODE\s0 is one or more of the letters ugoa, one of the
symbols +\-= and one or more of the letters rwxst
.Sp
Options:
.Sp
.Vb 1
\&        \-R      Recurse
.Ve
.IP "\fBclear\fR" 4
.IX Item "clear"
clear
.Sp
Clear screen
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\s-1OPTIONS\s0] \s-1SOURCE\s0 \s-1DEST\s0
.Sp
Copy \s-1SOURCE\s0 to \s-1DEST\s0, or multiple \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
Options:
.Sp
.Vb 9
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Force overwrite
\&        \-i      Prompt before overwrite
\&        \-l,\-s   Create (sym)links
.Ve
.IP "\fBcrond\fR" 4
.IX Item "crond"
crond \-fbS \-l N \-L \s-1LOGFILE\s0 \-c \s-1DIR\s0
.Sp
.Vb 6
\&        \-f      Foreground
\&        \-b      Background (default)
\&        \-S      Log to syslog (default)
\&        \-l      Set log level. 0 is the most verbose, default 8
\&        \-L      Log to file
\&        \-c      Working dir
.Ve
.IP "\fBcrontab\fR" 4
.IX Item "crontab"
crontab [\-c \s-1DIR\s0] [\-u \s-1USER\s0] [\-ler]|[\s-1FILE\s0]
.Sp
.Vb 6
\&        \-c      Crontab directory
\&        \-u      User
\&        \-l      List crontab
\&        \-e      Edit crontab
\&        \-r      Delete crontab
\&        FILE    Replace crontab by FILE (\*(Aq\-\*(Aq: stdin)
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from each input \s-1FILE\s0 to standard output
.Sp
Options:
.Sp
.Vb 6
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d CHAR Use CHAR instead of tab as the field delimiter
\&        \-s      Output only the lines containing delimiter
\&        \-f N    Print only these fields
\&        \-n      Ignored
.Ve
.IP "\fBdate\fR" 4
.IX Item "date"
date [\s-1OPTIONS\s0] [+FMT] [\s-1TIME\s0]
.Sp
Display time (using +FMT), or set time
.Sp
Options:
.Sp
.Vb 10
\&        [\-s,\-\-set] TIME Set time to TIME
\&        \-u,\-\-utc        Work in UTC (don\*(Aqt convert to local time)
\&        \-R,\-\-rfc\-2822   Output RFC\-2822 compliant date string
\&        \-I[SPEC]        Output ISO\-8601 compliant date string
\&                        SPEC=\*(Aqdate\*(Aq (default) for date only,
\&                        \*(Aqhours\*(Aq, \*(Aqminutes\*(Aq, or \*(Aqseconds\*(Aq for date and
\&                        time to the indicated precision
\&        \-r,\-\-reference FILE     Display last modification time of FILE
\&        \-d,\-\-date TIME  Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          Use FMT for \-d TIME conversion
.Ve
.Sp
Recognized \s-1TIME\s0 formats:
.Sp
.Vb 4
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
.Ve
.IP "\fBdd\fR" 4
.IX Item "dd"
dd [if=FILE] [of=FILE] [bs=N] [count=N] [skip=N]
	[seek=N]
.Sp
Copy a file with converting and formatting
.Sp
Options:
.Sp
.Vb 6
\&        if=FILE         Read from FILE instead of stdin
\&        of=FILE         Write to FILE instead of stdout
\&        bs=N            Read and write N bytes at a time
\&        count=N         Copy only N input blocks
\&        skip=N          Skip N input blocks
\&        seek=N          Skip N output blocks
.Ve
.Sp
Numbers may be suffixed by c (x1), w (x2), b (x512), kD (x1000), k (x1024),
\&\s-1MD\s0 (x1000000), M (x1048576), \s-1GD\s0 (x1000000000) or G (x1073741824)
.IP "\fBdf\fR" 4
.IX Item "df"
df [\-Pkmhai] [\-B \s-1SIZE\s0] [\s-1FILESYSTEM\s0...]
.Sp
Print filesystem usage statistics
.Sp
Options:
.Sp
.Vb 7
\&        \-P      POSIX output format
\&        \-k      1024\-byte blocks (default)
\&        \-m      1M\-byte blocks
\&        \-h      Human readable (e.g. 1K 243M 2G)
\&        \-a      Show all filesystems
\&        \-i      Inodes
\&        \-B SIZE Blocksize
.Ve
.IP "\fBdhcprelay\fR" 4
.IX Item "dhcprelay"
dhcprelay CLIENT_IFACE[,CLIENT_IFACE2...] \s-1SERVER_IFACE\s0 [\s-1SERVER_IP\s0]
.Sp
Relay \s-1DHCP\s0 requests between clients and server
.IP "\fBdmesg\fR" 4
.IX Item "dmesg"
dmesg [\-c] [\-n \s-1LEVEL\s0] [\-s \s-1SIZE\s0]
.Sp
Print or control the kernel ring buffer
.Sp
Options:
.Sp
.Vb 3
\&        \-c              Clear ring buffer after printing
\&        \-n LEVEL        Set console logging level
\&        \-s SIZE         Buffer size
.Ve
.IP "\fBdumpleases\fR" 4
.IX Item "dumpleases"
dumpleases [\-r|\-a] [\-f \s-1LEASEFILE\s0]
.Sp
Display \s-1DHCP\s0 leases granted by udhcpd
.Sp
Options:
.Sp
.Vb 3
\&        \-f,\-\-file=FILE  Leases file to load
\&        \-r,\-\-remaining  Interpret lease times as time remaining
\&        \-a,\-\-absolute   Interpret lease times as expire time
.Ve
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0...]
.Sp
Print the specified ARGs to stdout
.Sp
Options:
.Sp
.Vb 3
\&        \-n      Suppress trailing newline
\&        \-e      Interpret backslash\-escaped characters (i.e., \et=tab)
\&        \-E      Disable interpretation of backslash\-escaped characters
.Ve
.IP "\fBexpr\fR" 4
.IX Item "expr"
expr \s-1EXPRESSION\s0
.Sp
Print the value of \s-1EXPRESSION\s0 to standard output
.Sp
\&\s-1EXPRESSION\s0 may be:
.Sp
.Vb 10
\&        ARG1 | ARG2     ARG1 if it is neither null nor 0, otherwise ARG2
\&        ARG1 & ARG2     ARG1 if neither argument is null or 0, otherwise 0
\&        ARG1 < ARG2     1 if ARG1 is less than ARG2, else 0. Similarly:
\&        ARG1 <= ARG2
\&        ARG1 = ARG2
\&        ARG1 != ARG2
\&        ARG1 >= ARG2
\&        ARG1 > ARG2
\&        ARG1 + ARG2     Sum of ARG1 and ARG2. Similarly:
\&        ARG1 \- ARG2
\&        ARG1 * ARG2
\&        ARG1 / ARG2
\&        ARG1 % ARG2
\&        STRING : REGEXP         Anchored pattern match of REGEXP in STRING
\&        match STRING REGEXP     Same as STRING : REGEXP
\&        substr STRING POS LENGTH Substring of STRING, POS counted from 1
\&        index STRING CHARS      Index in STRING where any CHARS is found, or 0
\&        length STRING           Length of STRING
\&        quote TOKEN             Interpret TOKEN as a string, even if
\&                                it is a keyword like \*(Aqmatch\*(Aq or an
\&                                operator like \*(Aq/\*(Aq
\&        (EXPRESSION)            Value of EXPRESSION
.Ve
.Sp
Beware that many operators need to be escaped or quoted for shells.
Comparisons are arithmetic if both ARGs are numbers, else
lexicographical. Pattern matches return the string matched between
\&\e( and \e) or null; if \e( and \e) are not used, they return the number
of characters matched or 0.
.IP "\fBfalse\fR" 4
.IX Item "false"
false
.Sp
Return an exit code of \s-1FALSE\s0 (1)
.IP "\fBfind\fR" 4
.IX Item "find"
find [\s-1PATH\s0...] [\s-1EXPRESSION\s0]
.Sp
Search for files. The default \s-1PATH\s0 is the current directory,
default \s-1EXPRESSION\s0 is '\-print'
.Sp
\&\s-1EXPRESSION\s0 may consist of:
.Sp
.Vb 10
\&        \-follow         Follow symlinks
\&        \-mindepth N     Don\*(Aqt act on first N levels
\&        \-name PATTERN   File name (w/o directory name) matches PATTERN
\&        \-iname PATTERN  Case insensitive \-name
\&        \-type X         File type is X (X is one of: f,d,l,b,c,...)
\&        \-size N[bck]    File size is N (c:bytes,k:kbytes,b:512 bytes(def.)).
\&                        +/\-N: file size is bigger/smaller than N
\&        \-links N        Number of links is greater than (+N), less than (\-N),
\&                        or exactly N
\&        \-print          Print (default and assumed)
.Ve
.IP "\fBfree\fR" 4
.IX Item "free"
free
.Sp
Display the amount of free and used system memory
.IP "\fBftpget\fR" 4
.IX Item "ftpget"
ftpget [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1LOCAL_FILE\s0] \s-1REMOTE_FILE\s0
.Sp
Retrieve a remote file via \s-1FTP\s0
.Sp
Options:
.Sp
.Vb 5
\&        \-c,\-\-continue   Continue previous transfer
\&        \-v,\-\-verbose    Verbose
\&        \-u,\-\-username   Username
\&        \-p,\-\-password   Password
\&        \-P,\-\-port       Port number
.Ve
.IP "\fBftpput\fR" 4
.IX Item "ftpput"
ftpput [\s-1OPTIONS\s0] \s-1HOST\s0 [\s-1REMOTE_FILE\s0] \s-1LOCAL_FILE\s0
.Sp
Store a local file on a remote machine via \s-1FTP\s0
.Sp
Options:
.Sp
.Vb 4
\&        \-v,\-\-verbose    Verbose
\&        \-u,\-\-username   Username
\&        \-p,\-\-password   Password
\&        \-P,\-\-port       Port number
.Ve
.IP "\fBgrep\fR" 4
.IX Item "grep"
grep [\-HhrilLnqvsoeFEABC] \s-1PATTERN\s0 [\s-1FILE\s0]...
.Sp
Search for \s-1PATTERN\s0 in each \s-1FILE\s0 or standard input
.Sp
Options:
.Sp
.Vb 10
\&        \-H      Prefix output lines with filename where match was found
\&        \-h      Suppress the prefixing filename on output
\&        \-r      Recurse
\&        \-i      Ignore case distinctions
\&        \-l      List names of files that match
\&        \-L      List names of files that don\*(Aqt match
\&        \-n      Print line number with output lines
\&        \-q      Quiet. Return 0 if PATTERN is found, 1 otherwise
\&        \-v      Select non\-matching lines
\&        \-s      Suppress file open/read error messages
\&        \-c      Only print count of matching lines
\&        \-o      Show only the part of a line that matches PATTERN
\&        \-m N    Match up to N times per file
\&        \-F      PATTERN is a set of newline\-separated strings
\&        \-E      PATTERN is an extended regular expression
\&        \-e PTRN Pattern to match
\&        \-f FILE Read pattern from file
\&        \-A N    Print N lines of trailing context
\&        \-B N    Print N lines of leading context
\&        \-C N    Print N lines of output context
.Ve
.IP "\fBgunzip\fR" 4
.IX Item "gunzip"
gunzip [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Uncompress FILEs (or standard input)
.Sp
Options:
.Sp
.Vb 3
\&        \-c      Write to standard output
\&        \-f      Force
\&        \-t      Test file integrity
.Ve
.IP "\fBgzip\fR" 4
.IX Item "gzip"
gzip [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Compress FILEs (or standard input)
.Sp
Options:
.Sp
.Vb 3
\&        \-c      Write to standard output
\&        \-d      Decompress
\&        \-f      Force
.Ve
.IP "\fBhalt\fR" 4
.IX Item "halt"
halt [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Halt the system
.Sp
Options:
.Sp
.Vb 3
\&        \-d      Delay interval for halting
\&        \-n      No call to sync()
\&        \-f      Force halt (don\*(Aqt go through init)
.Ve
.IP "\fBhead\fR" 4
.IX Item "head"
head [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print first 10 lines of each \s-1FILE\s0 (or standard input) to standard output.
With more than one \s-1FILE\s0, precede each with a header giving the file name.
.Sp
Options:
.Sp
.Vb 4
\&        \-n N    Print first N lines instead of first 10
\&        \-c N    Output the first N bytes
\&        \-q      Never output headers giving file names
\&        \-v      Always output headers giving file names
.Ve
.IP "\fBhexdump\fR" 4
.IX Item "hexdump"
hexdump [\-bcCdefnosvx] \s-1FILE\s0...
.Sp
Display FILEs or standard input in a user specified format
.Sp
Options:
.Sp
.Vb 11
\&        \-b              One\-byte octal display
\&        \-c              One\-byte character display
\&        \-C              Canonical hex+ASCII, 16 bytes per line
\&        \-d              Two\-byte decimal display
\&        \-e FORMAT STRING
\&        \-f FORMAT FILE
\&        \-n LENGTH       Interpret only LENGTH bytes of input
\&        \-o              Two\-byte octal display
\&        \-s OFFSET       Skip OFFSET bytes
\&        \-v              Display all input data
\&        \-x              Two\-byte hexadecimal display
.Ve
.IP "\fBhostname\fR" 4
.IX Item "hostname"
hostname [\s-1OPTIONS\s0] [\s-1HOSTNAME\s0 | \-F \s-1FILE\s0]
.Sp
Get or set hostname or \s-1DNS\s0 domain name
.Sp
Options:
.Sp
.Vb 5
\&        \-s      Short
\&        \-i      Addresses for the hostname
\&        \-d      DNS domain name
\&        \-f      Fully qualified domain name
\&        \-F FILE Use FILE\*(Aqs content as hostname
.Ve
.IP "\fBifconfig\fR" 4
.IX Item "ifconfig"
ifconfig [\-a] interface [address]
.Sp
Configure a network interface
.Sp
Options:
.Sp
.Vb 7
\&        [[\-]broadcast [ADDRESS]] [[\-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [hw ether ADDRESS] [metric NN] [mtu NN]
\&        [[\-]trailers] [[\-]arp] [[\-]allmulti]
\&        [multicast] [[\-]promisc] [txqueuelen NN] [[\-]dynamic]
\&        [mem_start NN] [io_addr NN] [irq NN]
\&        [up|down] ...
.Ve
.IP "\fBinetd\fR" 4
.IX Item "inetd"
inetd [\-fe] [\-q N] [\-R N] [\s-1CONFFILE\s0]
.Sp
Listen for network connections and launch programs
.Sp
Options:
.Sp
.Vb 5
\&        \-f      Run in foreground
\&        \-e      Log to stderr
\&        \-q N    Socket listen queue (default: 128)
\&        \-R N    Pause services after N connects/min
\&                (default: 0 \- disabled)
.Ve
.IP "\fBinit\fR" 4
.IX Item "init"
init
.Sp
Init is the parent of all processes
.IP "\fBinsmod\fR" 4
.IX Item "insmod"
insmod [\s-1OPTIONS\s0] \s-1MODULE\s0 [symbol=value]...
.Sp
Load the specified kernel modules into the kernel
.Sp
Options:
.Sp
.Vb 7
\&        \-f      Force module to load into the wrong kernel version
\&        \-k      Make module autoclean\-able
\&        \-v      Verbose
\&        \-q      Quiet
\&        \-L      Lock to prevent simultaneous loads of a module
\&        \-o NAME Set internal module name to NAME
\&        \-x      Don\*(Aqt export externs
.Ve
.IP "\fBip\fR" 4
.IX Item "ip"
ip [\s-1OPTIONS\s0] {address | route | link | rule} {\s-1COMMAND\s0}
.Sp
ip [\s-1OPTIONS\s0] \s-1OBJECT\s0 {\s-1COMMAND\s0}
where \s-1OBJECT\s0 := {address | route | link | rule}
\&\s-1OPTIONS\s0 := { \-f[amily] { inet | inet6 | link } | \-o[neline] }
.IP "\fBipaddr\fR" 4
.IX Item "ipaddr"
ipaddr { {add|del} \s-1IFADDR\s0 dev \s-1STRING\s0 | {show|flush}
		[dev \s-1STRING\s0] [to \s-1PREFIX\s0] }
.Sp
ipaddr {add|delete} \s-1IFADDR\s0 dev \s-1STRING\s0
ipaddr {show|flush} [dev \s-1STRING\s0] [scope \s-1SCOPE\-ID\s0]
	[to \s-1PREFIX\s0] [label \s-1PATTERN\s0]
	\s-1IFADDR\s0 := \s-1PREFIX\s0 | \s-1ADDR\s0 peer \s-1PREFIX\s0
	[broadcast \s-1ADDR\s0] [anycast \s-1ADDR\s0]
	[label \s-1STRING\s0] [scope \s-1SCOPE\-ID\s0]
	SCOPE-ID := [host | link | global | \s-1NUMBER\s0]
.IP "\fBiplink\fR" 4
.IX Item "iplink"
iplink { set \s-1DEVICE\s0 { up | down | arp { on | off } | show [\s-1DEVICE\s0] }
.Sp
iplink set \s-1DEVICE\s0 { up | down | arp | multicast { on | off } |
			dynamic { on | off } |
			mtu \s-1MTU\s0 }
iplink show [\s-1DEVICE\s0]
.IP "\fBiproute\fR" 4
.IX Item "iproute"
iproute { list | flush | { add | del | change | append |
		replace | monitor } \s-1ROUTE\s0 }
.Sp
iproute { list | flush } \s-1SELECTOR\s0
iproute get \s-1ADDRESS\s0 [from \s-1ADDRESS\s0 iif \s-1STRING\s0]
			[oif \s-1STRING\s0]  [tos \s-1TOS\s0]
iproute { add | del | change | append | replace | monitor } \s-1ROUTE\s0
			\s-1SELECTOR\s0 := [root \s-1PREFIX\s0] [match \s-1PREFIX\s0] [proto \s-1RTPROTO\s0]
			\s-1ROUTE\s0 := [\s-1TYPE\s0] \s-1PREFIX\s0 [tos \s-1TOS\s0] [proto \s-1RTPROTO\s0]
				[metric \s-1METRIC\s0]
.IP "\fBiprule\fR" 4
.IX Item "iprule"
iprule {[list | add | del] \s-1RULE\s0}
.Sp
iprule [list | add | del] \s-1SELECTOR\s0 \s-1ACTION\s0
	\s-1SELECTOR\s0 := [from \s-1PREFIX\s0] [to \s-1PREFIX\s0] [tos \s-1TOS\s0] [fwmark \s-1FWMARK\s0]
			[dev \s-1STRING\s0] [pref \s-1NUMBER\s0]
	\s-1ACTION\s0 := [table \s-1TABLE_ID\s0] [nat \s-1ADDRESS\s0]
			[prohibit | reject | unreachable]
			[realms [\s-1SRCREALM/\s0]DSTREALM]
	\s-1TABLE_ID\s0 := [local | main | default | \s-1NUMBER\s0]
.IP "\fBkill\fR" 4
.IX Item "kill"
kill [\-l] [\-SIG] \s-1PID\s0...
.Sp
Send a signal (default: \s-1TERM\s0) to given PIDs
.Sp
Options:
.Sp
.Vb 1
\&        \-l      List all signal names and numbers
.Ve
.IP "\fBkillall\fR" 4
.IX Item "killall"
killall [\-l] [\-q] [\-SIG] process-name...
.Sp
Send a signal (default: \s-1TERM\s0) to given processes
.Sp
Options:
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-q      Don\*(Aqt complain if no processes were killed
.Ve
.IP "\fBklogd\fR" 4
.IX Item "klogd"
klogd [\-c N] [\-n]
.Sp
Kernel logger
.Sp
Options:
.Sp
.Vb 2
\&        \-c N    Only messages with level < N are printed to console
\&        \-n      Run in foreground
.Ve
.IP "\fBln\fR" 4
.IX Item "ln"
ln [\s-1OPTIONS\s0] \s-1TARGET\s0... LINK|DIR
.Sp
Create a link \s-1LINK\s0 or \s-1DIR/TARGET\s0 to the specified \s-1TARGET\s0(s)
.Sp
Options:
.Sp
.Vb 5
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S suf  Use suffix instead of ~ when making backup files
.Ve
.IP "\fBlogger\fR" 4
.IX Item "logger"
logger [\s-1OPTIONS\s0] [\s-1MESSAGE\s0]
.Sp
Write \s-1MESSAGE\s0 to the system log. If \s-1MESSAGE\s0 is omitted, log stdin.
.Sp
Options:
.Sp
.Vb 3
\&        \-s      Log to stderr as well as the system log
\&        \-t TAG  Log using the specified tag (defaults to user name)
\&        \-p PRIO Priority (numeric or facility.level pair)
.Ve
.IP "\fBlogin\fR" 4
.IX Item "login"
login [\-p] [\-h \s-1HOST\s0] [[\-f] \s-1USER\s0]
.Sp
Begin a new session on the system
.Sp
Options:
.Sp
.Vb 3
\&        \-f      Don\*(Aqt authenticate (user already authenticated)
\&        \-h      Name of the remote host
\&        \-p      Preserve environment
.Ve
.IP "\fBlogread\fR" 4
.IX Item "logread"
logread [\s-1OPTIONS\s0]
.Sp
Show messages in syslogd's circular buffer
.Sp
Options:
.Sp
.Vb 1
\&        \-f      Output data as log grows
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AacCdeFilnpLRrSsTtuvwxXhk] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
Options:
.Sp
.Vb 10
\&        \-1      List in a single column
\&        \-A      Don\*(Aqt list . and ..
\&        \-a      Don\*(Aqt hide entries starting with .
\&        \-C      List by columns
\&        \-c      With \-l: sort by ctime
\&        \-\-color[={always,never,auto}]   Control coloring
\&        \-d      List directory entries instead of contents
\&        \-e      List full date and time
\&        \-F      Append indicator (one of */=@|) to entries
\&        \-i      List inode numbers
\&        \-l      Long listing format
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-p      Append indicator (one of /=@|) to entries
\&        \-L      List entries pointed to by symlinks
\&        \-R      Recurse
\&        \-r      Sort in reverse order
\&        \-S      Sort by file size
\&        \-s      List the size of each file, in blocks
\&        \-T N    Assume tabstop every N columns
\&        \-t      With \-l: sort by modification time
\&        \-u      With \-l: sort by access time
\&        \-v      Sort by version
\&        \-w N    Assume the terminal is N columns wide
\&        \-x      List by lines
\&        \-X      Sort by extension
\&        \-h      List sizes in human readable format (1K 243M 2G)
.Ve
.IP "\fBlsmod\fR" 4
.IX Item "lsmod"
lsmod
.Sp
List the currently loaded kernel modules
.IP "\fBmicrocom\fR" 4
.IX Item "microcom"
microcom [\-d \s-1DELAY\s0] [\-t \s-1TIMEOUT\s0] [\-s \s-1SPEED\s0] [\-X] \s-1TTY\s0
.Sp
Copy bytes for stdin to \s-1TTY\s0 and from \s-1TTY\s0 to stdout
.Sp
Options:
.Sp
.Vb 5
\&        \-d      Wait up to DELAY ms for TTY output before sending every
\&                next byte to it
\&        \-t      Exit if both stdin and TTY are silent for TIMEOUT ms
\&        \-s      Set serial line to SPEED
\&        \-X      Disable special meaning of NUL and Ctrl\-X from stdin
.Ve
.IP "\fBmkdir\fR" 4
.IX Item "mkdir"
mkdir [\s-1OPTIONS\s0] \s-1DIRECTORY\s0...
.Sp
Create \s-1DIRECTORY\s0
.Sp
Options:
.Sp
.Vb 2
\&        \-m      Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP "\fBmknod\fR" 4
.IX Item "mknod"
mknod [\s-1OPTIONS\s0] \s-1NAME\s0 \s-1TYPE\s0 \s-1MAJOR\s0 \s-1MINOR\s0
.Sp
Create a special file (block, character, or pipe)
.Sp
Options:
.Sp
.Vb 2
\&        \-m      Create the special file using the specified mode (default a=rw)
\&TYPEs include:
\&
\&        b:      Make a block device
\&        c or u: Make a character device
\&        p:      Make a named pipe (MAJOR and MINOR are ignored)
.Ve
.IP "\fBmodprobe\fR" 4
.IX Item "modprobe"
modprobe [\-knqrsvb] \s-1MODULE\s0 [symbol=value...]
.Sp
Options:
.Sp
.Vb 7
\&        \-k      Make module autoclean\-able
\&        \-n      Dry run
\&        \-q      Quiet
\&        \-r      Remove module (stacks) or do autoclean
\&        \-s      Report via syslog instead of stderr
\&        \-v      Verbose
\&        \-b      Apply blacklist to module names too
.Ve
.IP "\fBmount\fR" 4
.IX Item "mount"
mount [\s-1OPTIONS\s0] [\-o \s-1OPTS\s0] \s-1DEVICE\s0 \s-1NODE\s0
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
Options:
.Sp
.Vb 9
\&        \-a              Mount all filesystems in fstab
\&        \-r              Read\-only mount
\&        \-w              Read\-write mount (default)
\&        \-t FSTYPE       Filesystem type
\&        \-O OPT          Mount only filesystems with option OPT (\-a only)
\&\-o OPT:
\&        loop            Ignored (loop devices are autodetected)
\&        remount         Remount a mounted filesystem, changing flags
\&        ro/rw           Same as \-r/\-w
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP "\fBmv\fR" 4
.IX Item "mv"
mv [\s-1OPTIONS\s0] \s-1SOURCE\s0 \s-1DEST\s0
or: mv [\s-1OPTIONS\s0] \s-1SOURCE\s0... \s-1DIRECTORY\s0
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST\s0, or move \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
Options:
.Sp
.Vb 2
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
.Ve
.IP "\fBnetstat\fR" 4
.IX Item "netstat"
netstat [\-laentuwxrp]
.Sp
Display networking information
.Sp
Options:
.Sp
.Vb 10
\&        \-l      Display listening server sockets
\&        \-a      Display all sockets (default: connected)
\&        \-e      Display other/more information
\&        \-n      Don\*(Aqt resolve names
\&        \-t      Tcp sockets
\&        \-u      Udp sockets
\&        \-w      Raw sockets
\&        \-x      Unix sockets
\&        \-r      Display routing table
\&        \-p      Display PID/Program name for sockets
.Ve
.IP "\fBnice\fR" 4
.IX Item "nice"
nice [\-n \s-1ADJUST\s0] [\s-1PROG\s0 [\s-1ARGS\s0]]
.Sp
Run \s-1PROG\s0 with modified scheduling priority
.Sp
Options:
.Sp
.Vb 1
\&        \-n ADJUST       Adjust priority by ADJUST
.Ve
.IP "\fBnslookup\fR" 4
.IX Item "nslookup"
nslookup [\s-1HOST\s0] [\s-1SERVER\s0]
.Sp
Query the nameserver for the \s-1IP\s0 address of the given \s-1HOST\s0
optionally using a specified \s-1DNS\s0 server
.IP "\fBpasswd\fR" 4
.IX Item "passwd"
passwd [\s-1OPTIONS\s0] [\s-1USER\s0]
.Sp
Change \s-1USER\s0's password. If no \s-1USER\s0 is specified,
changes the password for the current user.
.Sp
Options:
.Sp
.Vb 4
\&        \-a      Algorithm to use for password (des, md5)
\&        \-d      Delete password for the account
\&        \-l      Lock (disable) account
\&        \-u      Unlock (re\-enable) account
.Ve
.IP "\fBping\fR" 4
.IX Item "ping"
ping [\s-1OPTIONS\s0] \s-1HOST\s0
.Sp
Send \s-1ICMP\s0 \s-1ECHO_REQUEST\s0 packets to network hosts
.Sp
Options:
.Sp
.Vb 10
\&        \-4, \-6          Force IP or IPv6 name resolution
\&        \-c CNT          Send only CNT pings
\&        \-s SIZE         Send SIZE data bytes in packets (default:56)
\&        \-I IFACE/IP     Use interface or IP address as source
\&        \-W SEC          Seconds to wait for the first response (default:10)
\&                        (after all \-c CNT packets are sent)
\&        \-w SEC          Seconds until ping exits (default:infinite)
\&                        (can exit earlier with \-c CNT)
\&        \-q              Quiet, only displays output at start
\&                        and when finished
.Ve
.IP "\fBpoweroff\fR" 4
.IX Item "poweroff"
poweroff [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Halt and shut off power
.Sp
Options:
.Sp
.Vb 3
\&        \-d      Delay interval for halting
\&        \-n      No call to sync()
\&        \-f      Force power off (don\*(Aqt go through init)
.Ve
.IP "\fBps\fR" 4
.IX Item "ps"
ps
.Sp
Report process status
.Sp
Options:
.Sp
.Vb 1
\&        w       Wide output
.Ve
.IP "\fBreboot\fR" 4
.IX Item "reboot"
reboot [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Reboot the system
.Sp
Options:
.Sp
.Vb 3
\&        \-d      Delay interval for rebooting
\&        \-n      No call to sync()
\&        \-f      Force reboot (don\*(Aqt go through init)
.Ve
.IP "\fBrm\fR" 4
.IX Item "rm"
rm [\s-1OPTIONS\s0] \s-1FILE\s0...
.Sp
Remove (unlink) FILEs
.Sp
Options:
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP "\fBrmmod\fR" 4
.IX Item "rmmod"
rmmod [\s-1OPTIONS\s0] [\s-1MODULE\s0]...
.Sp
Unload the specified kernel modules from the kernel
.Sp
Options:
.Sp
.Vb 3
\&        \-w      Wait until the module is no longer used
\&        \-f      Force unloading
\&        \-a      Remove all unused modules (recursively)
.Ve
.IP "\fBroute\fR" 4
.IX Item "route"
route [{add|del|delete}]
.Sp
Edit kernel routing tables
.Sp
Options:
.Sp
.Vb 3
\&        \-n      Don\*(Aqt resolve names
\&        \-e      Display other/more information
\&        \-A inet Select address family
.Ve
.IP "\fBrun-parts\fR" 4
.IX Item "run-parts"
run-parts [\-t] [\-a \s-1ARG\s0] [\-u \s-1MASK\s0] \s-1DIRECTORY\s0
.Sp
Run a bunch of scripts in \s-1DIRECTORY\s0
.Sp
Options:
.Sp
.Vb 3
\&        \-t      Print what would be run, but don\*(Aqt actually run anything
\&        \-a ARG  Pass ARG as argument for every program
\&        \-u MASK Set the umask to MASK before running every program
.Ve
.IP "\fBsed\fR" 4
.IX Item "sed"
sed [\-efinr] \s-1SED_CMD\s0 [\s-1FILE\s0]...
.Sp
Options:
.Sp
.Vb 5
\&        \-e CMD  Add CMD to sed commands to be executed
\&        \-f FILE Add FILE contents to sed commands to be executed
\&        \-i      Edit files in\-place (else sends result to stdout)
\&        \-n      Suppress automatic printing of pattern space
\&        \-r      Use extended regex syntax
.Ve
.Sp
If no \-e or \-f, the first non-option argument is the sed command string.
Remaining arguments are input files (stdin if none).
.IP "\fBseq\fR" 4
.IX Item "seq"
seq [\-w] [\-s \s-1SEP\s0] [\s-1FIRST\s0 [\s-1INC\s0]] \s-1LAST\s0
.Sp
Print numbers from \s-1FIRST\s0 to \s-1LAST\s0, in steps of \s-1INC\s0.
\&\s-1FIRST\s0, \s-1INC\s0 default to 1
.Sp
Options:
.Sp
.Vb 2
\&        \-w      Pad to last with leading zeros
\&        \-s SEP  String separator
.Ve
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP "\fBsort\fR" 4
.IX Item "sort"
sort [\-nrugMcszbdfimSTokt] [\-o \s-1FILE\s0] [\-k start[.offset][opts][,end[.offset][opts]] [\-t \s-1CHAR\s0] [\s-1FILE\s0]...
.Sp
Sort lines of text
.Sp
Options:
.Sp
.Vb 10
\&        \-b      Ignore leading blanks
\&        \-c      Check whether input is sorted
\&        \-d      Dictionary order (blank or alphanumeric only)
\&        \-f      Ignore case
\&        \-g      General numerical sort
\&        \-i      Ignore unprintable characters
\&        \-k      Sort key
\&        \-M      Sort month
\&        \-n      Sort numbers
\&        \-o      Output to file
\&        \-k      Sort by key
\&        \-t CHAR Key separator
\&        \-r      Reverse sort order
\&        \-s      Stable (don\*(Aqt sort ties alphabetically)
\&        \-u      Suppress duplicate lines
\&        \-z      Lines are terminated by NUL, not newline
\&        \-mST    Ignored for GNU compatibility
.Ve
.IP "\fBsysctl\fR" 4
.IX Item "sysctl"
sysctl [\s-1OPTIONS\s0] [\s-1VALUE\s0]...
.Sp
Configure kernel parameters at runtime
.Sp
Options:
.Sp
.Vb 6
\&        \-n      Don\*(Aqt print key names
\&        \-e      Don\*(Aqt warn about unknown keys
\&        \-w      Change sysctl setting
\&        \-p FILE Load sysctl settings from FILE (default /etc/sysctl.conf)
\&        \-a      Display all values
\&        \-A      Display all values in table form
.Ve
.IP "\fBsyslogd\fR" 4
.IX Item "syslogd"
syslogd [\s-1OPTIONS\s0]
.Sp
System logging utility.
Note that this version of syslogd ignores /etc/syslog.conf.
.Sp
Options:
.Sp
.Vb 8
\&        \-n              Run in foreground
\&        \-O FILE         Log to given file (default:/var/log/messages)
\&        \-l n            Set local log level
\&        \-S              Smaller logging output
\&        \-s SIZE         Max size (KB) before rotate (default:200KB, 0=off)
\&        \-b N            N rotated logs to keep (default:1, max=99, 0=purge)
\&        \-D              Drop duplicates
\&        \-C[size(KiB)]   Log to shared mem buffer (read it using logread)
.Ve
.IP "\fBtail\fR" 4
.IX Item "tail"
tail [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print last 10 lines of each \s-1FILE\s0 (or standard input) to standard output.
With more than one \s-1FILE\s0, precede each with a header giving the file name.
.Sp
Options:
.Sp
.Vb 2
\&        \-n N[kbm]       Print last N lines instead of last 10
\&        \-f              Output data as the file grows
.Ve
.IP "\fBtar\fR" 4
.IX Item "tar"
tar \-[cxtzmvO] [\-f \s-1TARFILE\s0] [\-C \s-1DIR\s0] [\s-1FILE\s0]...
.Sp
Create, extract, or list files from a tar file
.Sp
Options:
.Sp
.Vb 4
\&        c       Create
\&        x       Extract
\&        t       List
\&Archive format selection:
\&
\&        z       Filter the archive through gzip
\&        m       Do not restore mtime
\&File selection:
\&
\&        f       Name of TARFILE or "\-" for stdin
\&        O       Extract to stdout
\&        C       Change to DIR before operation
\&        v       Verbose
.Ve
.IP "\fBtest\fR" 4
.IX Item "test"
test \s-1EXPRESSION\s0 ]
.Sp
Check file types, compare values etc. Return a 0/1 exit code
depending on logical value of \s-1EXPRESSION\s0
.IP "\fBtop\fR" 4
.IX Item "top"
top [\-b] [\-nCOUNT] [\-dSECONDS]
.Sp
Provide a view of process activity in real time.
Read the status of all processes from /proc each \s-1SECONDS\s0
and show the status for however many processes will fit on the screen.
.IP "\fBtraceroute\fR" 4
.IX Item "traceroute"
traceroute [\-FIldnrv] [\-f 1ST_TTL] [\-m \s-1MAXTTL\s0] [\-p \s-1PORT\s0] [\-q \s-1PROBES\s0]
	[\-s \s-1SRC_IP\s0] [\-t \s-1TOS\s0] [\-w \s-1WAIT_SEC\s0] [\-g \s-1GATEWAY\s0] [\-i \s-1IFACE\s0]
	[\-z \s-1PAUSE_MSEC\s0] \s-1HOST\s0 [\s-1BYTES\s0]
.Sp
Trace the route to \s-1HOST\s0
.Sp
Options:
.Sp
.Vb 10
\&        \-F      Set the don\*(Aqt fragment bit
\&        \-I      Use ICMP ECHO instead of UDP datagrams
\&        \-l      Display the ttl value of the returned packet
\&        \-d      Set SO_DEBUG options to socket
\&        \-n      Print numeric addresses
\&        \-r      Bypass routing tables, send directly to HOST
\&        \-v      Verbose
\&        \-m      Max time\-to\-live (max number of hops)
\&        \-p      Base UDP port number used in probes
\&                (default 33434)
\&        \-q      Number of probes per \*(Aqttl\*(Aq (default 3)
\&        \-s      IP address to use as the source address
\&        \-t      Type\-of\-service in probe packets (default 0)
\&        \-w      Time in seconds to wait for a response (default 3)
\&        \-g      Loose source route gateway (8 max)
.Ve
.IP "\fBtrue\fR" 4
.IX Item "true"
true
.Sp
Return an exit code of \s-1TRUE\s0 (0)
.IP "\fBudhcpc\fR" 4
.IX Item "udhcpc"
udhcpc [\-Cfbnqtvo] [\-c \s-1CID\s0] [\-V \s-1VCLS\s0] [\-H \s-1HOSTNAME\s0] [\-i \s-1INTERFACE\s0]
	[\-p pidfile] [\-r \s-1IP\s0] [\-s script] [\-O dhcp\-option]... [\-P N]
.Sp
.Vb 10
\&        \-V,\-\-vendorclass=CLASSID        Vendor class identifier
\&        \-i,\-\-interface=INTERFACE        Interface to use (default eth0)
\&        \-H,\-h,\-\-hostname=HOSTNAME       Client hostname
\&        \-c,\-\-clientid=CLIENTID  Client identifier
\&        \-C,\-\-clientid\-none      Suppress default client identifier
\&        \-p,\-\-pidfile=FILE       Create pidfile
\&        \-r,\-\-request=IP         IP address to request
\&        \-s,\-\-script=FILE        Run FILE at DHCP events (default /etc/scripts/default.script)
\&        \-t,\-\-retries=N          Send up to N discover packets
\&        \-T,\-\-timeout=N          Pause between packets (default 3 seconds)
\&        \-A,\-\-tryagain=N         Wait N seconds (default 20) after failure
\&        \-O,\-\-request\-option=OPT Request DHCP option OPT (cumulative)
\&        \-o,\-\-no\-default\-options Don\*(Aqt request any options (unless \-O is also given)
\&        \-f,\-\-foreground Run in foreground
\&        \-b,\-\-background Background if lease is not immediately obtained
\&        \-S,\-\-syslog     Log to syslog too
\&        \-n,\-\-now        Exit with failure if lease is not immediately obtained
\&        \-q,\-\-quit       Quit after obtaining lease
\&        \-R,\-\-release    Release IP on quit
\&        \-P,\-\-client\-port N  Use port N instead of default 68
\&        \-a,\-\-arping     Use arping to validate offered address
.Ve
.IP "\fBudhcpd\fR" 4
.IX Item "udhcpd"
udhcpd [\-fS] [\-P N] [configfile]
.Sp
\&\s-1DHCP\s0 server
.Sp
.Vb 3
\&        \-f      Run in foreground
\&        \-S      Log to syslog too
\&        \-P N    Use port N instead of default 67
.Ve
.IP "\fBumount\fR" 4
.IX Item "umount"
umount [\s-1OPTIONS\s0] FILESYSTEM|DIRECTORY
.Sp
Unmount file systems
.Sp
Options:
.Sp
.Vb 4
\&        \-r      Try to remount devices as read\-only if mount is busy
\&        \-l      Lazy umount (detach filesystem)
\&        \-f      Force umount (i.e., unreachable NFS server)
\&        \-d      Free loop device if it has been used
.Ve
.IP "\fBuname\fR" 4
.IX Item "uname"
uname [\-amnrspv]
.Sp
Print system information
.Sp
Options:
.Sp
.Vb 7
\&        \-a      Print all
\&        \-m      The machine (hardware) type
\&        \-n      Hostname
\&        \-r      OS release
\&        \-s      OS name (default)
\&        \-p      Processor type
\&        \-v      OS version
.Ve
.IP "\fBuptime\fR" 4
.IX Item "uptime"
uptime
.Sp
Display the time since the last boot
.IP "\fBvconfig\fR" 4
.IX Item "vconfig"
vconfig \s-1COMMAND\s0 [\s-1OPTIONS\s0]
.Sp
Create and remove virtual ethernet devices
.Sp
Options:
.Sp
.Vb 6
\&        add             [interface\-name] [vlan_id]
\&        rem             [vlan\-name]
\&        set_flag        [interface\-name] [flag\-num] [0 | 1]
\&        set_egress_map  [vlan\-name] [skb_priority] [vlan_qos]
\&        set_ingress_map [vlan\-name] [skb_priority] [vlan_qos]
\&        set_name_type   [name\-type]
.Ve
.IP "\fBvi\fR" 4
.IX Item "vi"
vi [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Edit \s-1FILE\s0
.Sp
Options:
.Sp
.Vb 3
\&        \-c      Initial command to run ($EXINIT also available)
\&        \-R      Read\-only
\&        \-H      Short help regarding available features
.Ve
.IP "\fBwatch\fR" 4
.IX Item "watch"
watch [\-n seconds] [\-t] \s-1PROG\s0 [\s-1ARGS\s0]
.Sp
Run \s-1PROG\s0 periodically
.Sp
Options:
.Sp
.Vb 2
\&        \-n      Loop period in seconds (default 2)
\&        \-t      Don\*(Aqt print header
.Ve
.IP "\fBwget\fR" 4
.IX Item "wget"
wget [\-csq] [\-O file] [\-Y on/off] [\-P \s-1DIR\s0] [\-U agent] url
.Sp
Retrieve files via \s-1HTTP\s0 or \s-1FTP\s0
.Sp
Options:
.Sp
.Vb 7
\&        \-s      Spider mode \- only check file existence
\&        \-c      Continue retrieval of aborted transfer
\&        \-q      Quiet
\&        \-P      Set directory prefix to DIR
\&        \-O      Save to filename (\*(Aq\-\*(Aq for stdout)
\&        \-U      Adjust \*(AqUser\-Agent\*(Aq field
\&        \-Y      Use proxy (\*(Aqon\*(Aq or \*(Aqoff\*(Aq)
.Ve
.IP "\fBwhich\fR" 4
.IX Item "which"
which [\s-1COMMAND\s0]...
.Sp
Locate a \s-1COMMAND\s0
.IP "\fByes\fR" 4
.IX Item "yes"
yes [\s-1OPTIONS\s0] [\s-1STRING\s0]
.Sp
Repeatedly output a line with \s-1STRING\s0, or 'y'
.IP "\fBzcat\fR" 4
.IX Item "zcat"
zcat \s-1FILE\s0
.Sp
Uncompress to stdout
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS\s0.  Some applets however, such as login and su, will use libc functions
that require \s-1NSS\s0.
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP\s0, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS\s0.  This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
