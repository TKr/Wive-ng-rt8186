#!/bin/sh

. /etc/boot
. /etc/network/interfaces
dhcpc=/sbin/udhcpc

start() {
echo "Starting network..."
#---------------- Forward enable--------------------

#workaround for LCP bug and fix trouble for MTU/MRU for some host and VPN
if [ "$PPPOE_CALL_START" = "yes" ] || [ "$PPTP_CALL_START" = "yes" ] || [ "$L2TP_CALL_START" = "yes" ]; then
    echo "ADD iptables rules for fix LCP bug"
    iptables -A OUTPUT -o br0 -p icmp -m icmp --icmp-type 3 -j DROP
    iptables -A OUTPUT -o eth0 -p icmp -m icmp --icmp-type 3 -j DROP
    iptables -A OUTPUT -o eth1 -p icmp -m icmp --icmp-type 3 -j DROP
    iptables -A OUTPUT -o wlan0 -p icmp -m icmp --icmp-type 3 -j DROP
    echo "ADD iptables rules for fix MTU size"
    iptables -I FORWARD -o ppp+ -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
    iptables -I FORWARD -i ppp+ -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
    iptables -A OUTPUT -o ppp+ -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu
    iptables -t mangle -A POSTROUTING -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu                    
fi

#Enable MASQUERADE foe all interfaces (fix ME)
if [ "$MASQUERADE" = "yes" ] ; then
     echo "Enable MASQUERADE"
    if [ "$CLIENTSNET" = "" ] ; then
	 iptables -t nat -A POSTROUTING -j MASQUERADE
	else
    	 iptables -t nat -A POSTROUTING -s $CLIENTSNET -j MASQUERADE
    fi
fi

if [ "$IPV4_FORWARD_ENABLE" = "yes" ] ; then
     echo "Forward ON and iptables FORWARD rule set to ACCEPT"
     echo "1">/proc/sys/net/ipv4/conf/all/forwarding
     echo "2">/proc/sys/net/ipv4/conf/all/arp_announce
     echo "1">/proc/sys/net/ipv4/conf/all/arp_ignore
     iptables -A FORWARD -m state --state INVALID -j DROP
     iptables -P FORWARD ACCEPT
     else
     iptables -P FORWARD DROP
     echo "1">/proc/sys/net/ipv4/conf/all/arp_announce
     echo "0">/proc/sys/net/ipv4/conf/all/arp_ignore
fi
#----------------------------------NO BRIDGE START---------------------------------------------------
#------------------ETH0----------------------------------------------
if [ -f /etc/devices/eth0 ]; then
    if [ "$ETH0_ENABLED" = "yes" ]; then
     echo  "   Starting eth0: "
       if [ "$ETH0_IN_BR0" != "yes" ]; then
         echo NoBridge start ETH0
        if [ "$ETH0_USE_DHCP" = "yes" ]; then
           echo "Set IP adress eth0 from DHCP server" 
           ip link set eth0 up
           $dhcpc -p /var/run/udhcpc-eth0.pid -S -i eth0 -t 3 -b >>/dev/null
        else
           echo "Set IP adress eth0 from local files" 
           ip link set eth0 up
           ip addr add $ETH0_IPADDR brd + dev eth0
        fi
      fi
    fi
fi
echo ETH0 OK
#------------------ETH1----------------------------------------------
if [ -f /etc/devices/eth1 ]; then
    if [ "$ETH1_ENABLED" = "yes" ]; then
     echo  "   Starting eth1: "
      if [ "$ETH1_IN_BR0" != "yes" ]; then
       echo NoBridge start ETH1
        if [ "$ETH1_USE_DHCP" = "yes" ]; then
           echo "Set IP adress eth1 from DHCP server" 
           ip link set eth1 up
           $dhcpc -p /var/run/udhcpc-eth1.pid -S -i eth1 -t 3 -b >>/dev/null
        else
           echo "Set IP adress eth1 from local files" 
           ip link set eth1 up
           ip addr add $ETH1_IPADDR brd + dev eth1
        fi
      fi
    fi
fi
echo ETH1 OK
#----------------- FORCED IP`S ------------------------------------------------------------
if [ -f /etc/devices/eth0 ]; then
    if [ "$ETH0_ENABLED" = "yes" ]; then
        if [ "$ETH0_FORCEIP" = "yes" ]; then
         echo ForceIP eth0
         ip addr flush dev eth0
         ip addr add $ETH0_IPADDR brd + dev eth0
        fi
    echo OK
    fi
fi
if [ -f /etc/devices/eth1 ]; then
    if [ "$ETH1_ENABLED" = "yes" ]; then
        if [ "$ETH1_FORCEIP" = "yes" ]; then
         echo ForceIP eth1
         ip addr flush dev eth1
         ip addr add $ETH1_IPADDR  brd + dev eth1
        fi
        echo OK
    fi
fi
#-------------------------------------VLAN  START---------------------
echo Vlan
if [ "$VLAN_START" = "yes" ] && [ "$BRIDGE_START" != "yes" ] ; then
   echo VLAN modules load
   modtest=`uname -r`
   moddir=/lib/modules/$modtest/kernel/net
   /sbin/insmod $moddir/8021q/8021q.o
   echo starting VLAN
   /etc/network/vlan
fi
echo OK
}

stop() {

echo "Stop network..."
if [ "$BRIDGE_START" != "yes" ]; then
  #for eth0
  if [ -f /etc/devices/eth0 ]; then
  if [ "$ETH0_ENABLED" = "yes" ]; then
  echo  "   Stopping eth0: "
  ip link set $ETH0_DEVICE down
  echo " Ok"
  fi
  fi
  #for eth1
  if [ -f /etc/devices/eth1 ]; then
  if [ "$ETH1_ENABLED" = "yes" ]; then
  echo  "   Stopping eth1: "
  ip link set $ETH1_DEVICE down
  echo " Ok"
  fi
  fi
  #for wlan
  if [ -f /etc/devices/wlan0 ]; then
  if [ "$WLAN_ENABLED" = "yes"]; then
  echo  "   Stopping wlan0: "
  ip link set wlan0 down
  echo " Ok"
  fi
  fi
fi
}

case "$1" in
	start)
	    start
	    ;;

	stop)
	    stop
	    ;;

	restart)
	    stop
	    start
	    ;;

	*)
	    echo $"Usage: $0 {start|stop|restart}"
	    exit 1
esac
